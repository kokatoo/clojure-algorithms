(ns clojure-algorithms.numbers-test
  (:require [clojure.test :refer :all]
            [clojure-algorithms.numbers :refer :all]))

(deftest fib-seq-test
  (testing
      (is (= '(1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040))
          (take 30 (fib-seq)))))

(deftest fib-test
  (testing
      (is (= 832040
             (fib 30)))))

(deftest factorial-test
  (testing
      (is (= 2432902008176640000
             (factorial 20)))))

(deftest gcd-test
  (testing
      (is (= 9
             (gcd 12345678 87654321)))))

(deftest lcm-test
  (testing
      (is (= 120239113597182
             (lcm 12345678 87654321)))))

(deftest dot-product-test
  (testing
      (is (= 156
             (dot-product (range 1 9) (range 9 0 -1))))))

(deftest convert-test
  (testing
      (is (= [1 1 1 1 1 0 0 1 1 1]
             (convert 999 2)))
    (is (= [1 7 4 7]
           (convert 999 8)))
    (is (= [3 14 7]
           (convert 999 16)))))

(deftest pascal-triangle-test
  (testing
      (is (= '([1] (1 1) (1 2 1) (1 3 3 1) (1 4 6 4 1) (1 5 10 10 5 1) (1 6 15 20 15 6 1) (1 7 21 35 35 21 7 1) (1 8 28 56 70 56 28 8 1) (1 9 36 84 126 126 84 36 9 1)))
          (pascal-triangle 10))))

(deftest prime-factors-test
  (testing
      (is (= [2 3 3 47 14593]
             (prime-factors 12345678)))))

(deftest prime-seq-test
  (testing
      (is (= '(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541)
             (take 100 (prime-seq))))))

(deftest prime-seq-2-test
  (testing
      (is (= '(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541)
             (take 100 (prime-seq))))))


(deftest sieve-test
  (testing
      (is (= '(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541)
             (sieve 541)))))

(deftest perfect-squares-test
  (testing
      (is (= '(1 4 9 16 25 36 49 64 81 100 121 144 169 196 225 256 289 324 361 400 441 484 529 576 625 676 729 784 841 900 961 1024 1089 1156 1225 1296 1369 1444 1521 1600 1681 1764 1849 1936 2025 2116 2209 2304 2401 2500 2601 2704 2809 2916 3025 3136 3249 3364 3481 3600 3721 3844 3969 4096 4225 4356 4489 4624 4761 4900 5041 5184 5329 5476 5625 5776 5929 6084 6241 6400 6561 6724 6889 7056 7225 7396 7569 7744 7921 8100 8281 8464 8649 8836 9025 9216 9409 9604 9801 10000)
             (take 100 (perfect-squares))))))

(deftest cartesian-product-test
  (testing
      (is (= #{[1 4] [2 4] [3 4] [1 5] [2 5] [3 5]}
             (cartesian-products #{1 2 3} #{4 5})))))

(deftest combinations-test
  (testing
      (is (= #{#{} #{1} #{2} #{1 2} #{3} #{1 3} #{2 3} #{1 2 3}}
             (combinations [1 2 3])))))

(deftest k-combinations-test
  (testing
      (is (= #{#{1 2} #{1 3} #{2 3}}
             (k-combinations 2 [1 2 3])))))
