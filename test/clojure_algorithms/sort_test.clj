(ns clojure-algorithms.sort-test
  (:require [clojure.test :refer :all]
            [clojure-algorithms.sort :refer :all]))

(def unsorted
  '(3120 7327 7561 1216 9659 6673 8765 1152 3871 5828 3869 479 896 4152 1655 5998 8915 2609 5039 9966 9130 9520 6892 5450 8220 8890
         7370 1636 7659 7047 463 6494 2900 1709 1246 3946 6835 1241 6875 2768 6159 893 3772 4879 6344 7101 622 1374 735 554 1827 5669
         1978 3661 8882 4488 9463 8296 7768 9053 4746 5264 8912 810 8030 7780 2510 8306 2689 7466 6112 4391 1554 2823 3199 5870 8234
         6991 1245 879 9061 3685 5214 2851 6457 7648 7782 3719 2481 8718 729 3186 2086 6623 2851 5355 9262 7035 8547 8759 5613 8061 7770
         961 185 358 2444 4257 1358 3359 6631 4747 6516 4727 7743 3063 2839 69 3925 1377 3057 5208 8354 7963 3295 3839 4671 7546 6231 9294
         8991 2966 1725 302 3038 1237 8782 7133 9813 5020 7278 6321 7925 8715 5202 9271 3193 6914 7364 2512 6484 1791 4477 5061 4859 5160
         7316 1461 9060 389 9267 7404 4129 9137 1982 8531 1521 7967 3109 1995 458 291 2069 4701 3462 9817 9750 1718 6038 2678 613 3327 3254
         6795 1213 9382 6666 8635 7417 5251 3412 9518 3695 4433 5613 5886 1806 9169 2268 555 2894 1828 7713 4837 6563 6674 419 4672 2883 3728
         3412 7396 8378 3884 2921 9652 5110 7165 4986 1057 2682 4075 723 2735 6646 3366 9676 4581 3201 8226 7298 223 9264 6876 6939 4034 9096
         2893 8960 278 3467 5163 9572 481 5029 7335 9839 1463 4060 1861 910 3129 2007 4287 4992 2056 6364 9309 2841 4205 9368 1310 7622 7682
         4674 8564 1855 4346 749 2130 8895 7301 7072 7542 2863 9819 9382 9872 1310 87 3189 449 2996 5323 594 6607 9122 8245 4009 4177 137 8700
         1833 6137 1772 3294 5340 9822 3380 6307))

(def sorted
  '(69 87 137 185 223 278 291 302 358 389 419 449 458 463 479 481 554 555 594 613 622 723 729 735 749 810 879 893 896 910 961 1057 1152 1213 1216
       1237 1241 1245 1246 1310 1310 1358 1374 1377 1461 1463 1521 1554 1636 1655 1709 1718 1725 1772 1791 1806 1827 1828 1833 1855 1861 1978 1982
       1995 2007 2056 2069 2086 2130 2268 2444 2481 2510 2512 2609 2678 2682 2689 2735 2768 2823 2839 2841 2851 2851 2863 2883 2893 2894 2900 2921
       2966 2996 3038 3057 3063 3109 3120 3129 3186 3189 3193 3199 3201 3254 3294 3295 3327 3359 3366 3380 3412 3412 3462 3467 3661 3685 3695 3719
       3728 3772 3839 3869 3871 3884 3925 3946 4009 4034 4060 4075 4129 4152 4177 4205 4257 4287 4346 4391 4433 4477 4488 4581 4671 4672 4674 4701
       4727 4746 4747 4837 4859 4879 4986 4992 5020 5029 5039 5061 5110 5160 5163 5202 5208 5214 5251 5264 5323 5340 5355 5450 5613 5613 5669 5828
       5870 5886 5998 6038 6112 6137 6159 6231 6307 6321 6344 6364 6457 6484 6494 6516 6563 6607 6623 6631 6646 6666 6673 6674 6795 6835 6875 6876
       6892 6914 6939 6991 7035 7047 7072 7101 7133 7165 7278 7298 7301 7316 7327 7335 7364 7370 7396 7404 7417 7466 7542 7546 7561 7622 7648 7659
       7682 7713 7743 7768 7770 7780 7782 7925 7963 7967 8030 8061 8220 8226 8234 8245 8296 8306 8354 8378 8531 8547 8564 8635 8700 8715 8718 8759
       8765 8782 8882 8890 8895 8912 8915 8960 8991 9053 9060 9061 9096 9122 9130 9137 9169 9262 9264 9267 9271 9294 9309 9368 9382 9382 9463 9518
       9520 9572 9652 9659 9676 9750 9813 9817 9819 9822 9839 9872 9966))

(deftest insert-sort-test
  (is (= (insert-sort []) []))
  (is (= (insert-sort (range 100 0 -1))
           (range 1 101)))
  (is (= (insert-sort unsorted) sorted)))

(deftest merge-sort-test
  (is (= (merge-sort []) []))
  (is (= (merge-sort (range 100 0 -1))
           (range 1 101)))
  (is (= (merge-sort unsorted) sorted)))

(deftest merge-sort-iter-test
  (is (= (merge-sort-iter []) []))
  (is (= (merge-sort-iter (range 100 0 -1))
           (range 1 101)))
  (is (= (merge-sort-iter unsorted) sorted)))

